NAME
    .B _printf
    - formatted output conversion
SYNOPSIS
    .B #include \(main.h\(dq
    .sp
    .B int _printf(const char *
            .I format
            .B , ...);
DESCRIPTION
    The _printf function is a variadic function that returns a string based on a.
    I format it and print it to standard output, similar to the printf function in the C standard library.
    A variable number of arguments can be passed to it.
    .sp
    .B Return value
    .sp
    On success, _printf returns the number of characters printed. If
    .I format
    is NULL or if the functions encounters any errors, it returns -1.
    .sp
    .B Format of the format string
    .sp
    The format string can contain any characters in double quotes,
    just like a regular string, and will be written as is. For example, _printf(\(dqHello\(dq) will
    print: Hello.
    However, this format string can contain.I conversion specifiers.
    These start with a %, and are followed with a character (see
            .I conversion specifiers
            ). Special characters like a new line are escaped, for example _printf(\(dq\\n\(dq)
            will print a new line.
    .sp
    .B Conversion specifiers
    .sp
    These are the characters that specify the type of the variable that needs to be printed.
    The variables to be printed are separated from the format string with a comma. Each variable
    passed to _printf need to have a conversion specifier.
    .sp
    .B i, d
    - Both these specifiers are for
    .I int
    arguments. They convert the variable to a decimal number, positive or negative.
    .sp
    .B c
    - Prints a
    .I single character.
    .sp
    .B s
    - Prints an entire
    .I string.
    .sp
    .B u
    - Prints an
    .I unsigned int.
    .sp
    .B x, X
    - Respecively print a number in lowercase and uppercase
    .I hexadecimal
    base.
    .sp
    .B o, b
    - Respectively print a number in
    .I octal
    and
    .I binary
    base.
    .sp
    .B %
    - Acts like an escape for the character %. To print \(dq%\(dq, the format string should contain
    \(dq%%\(dq.
    .sp
    .B r, R
    - Respectively print a string in reverse and in ROT13 encryption.
    .sp
    .B S
    - Prints a string, but non-printable characters are printed this way: \\x, followed by the ASCII code
    value in uppercase hexadecimal.
    .sp
    .B p
    - Prints an address, given by a pointer variable
    .sp
    .B Flag characters for conversion specifiers
    .sp
    .B +
    - Prints a plus sign in front of positive signed integers and a minus sign in front of negative
    signed integers.
    + overrides a space when both flags are given.
    .sp
    .B ' '
    - Prints a space in front of signed integers.
    .sp
    .B #
    - Modifier for unsigned conversions. For x, prepends \(dq0x\(dq, and for X, prepends \(dq0X\(dq.
    For o, if the converted number doesn't already begin with a 0, prepends a 0.
    .sp
SEE ALSO
    .I printf(3)
    .I _putchar.c
    .SH NOTES
    _printf uses a custom character printing function called _putchar, that uses the system call write().
    _putchar uses a static buffer of 1024 bytes and a static incrementing variable.
    As a result, whenever _putchar is called within _printf, the character is saved in the buffer
    and the function proceeds on to the next character, until _printf calls _putchar(-1), which (dqflushes(dq the buffer and resets the incrementing variable to 0.
    As a result, _putchar only needs to call write once, sending it the entire buffer as well as the amount of bytes in it, which is determined by the incrementing variable's value.
    .sp
 BUGS
    _printf does not take care of length and precision modifiers yet.
    For example, _printf(\(dq%hx\(dq) will not produce the same output as the call to the
    standard library printf.
AUTHORS
    Stephen Muchendu and Florence wangui, nbo-022April July" "MAIN" "_PRINTF"
COPYRIGHT
    Place a GPLheader here or whatever license terms you prefer

